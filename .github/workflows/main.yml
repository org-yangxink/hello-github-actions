name: GitHub Actions Demo
on: [push]
permissions:
      id-token: write
      contents: read

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
  calc-job:
    runs-on: ubuntu-latest
    environment: secretEnv
    name: Save output
    steps:
      - shell: bash
        env: 
          my_secret: ${{ secrets.SuperSecret }}
          org_secret: ${{ secrets.ORG_SECRET}}
        run: |
          expr 1234 + 7891 > output.log
          echo "repo-secret-by-env:$my_secret" >> output.log
          echo "env-vmsecret-direct: ${{ secrets.VMPASSWORD }}" >> output.log
          echo "super-direct:${{ secrets.SuperSecret }}" >> output.log
          echo "org-by-env:$org_secret" >> output.log
      - name: Upload output file
        uses: actions/upload-artifact@v2
        with:
          name: output-log-file
          path: output.log
  show-calc-result-job:
    runs-on: ubuntu-latest
    needs: calc-job
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: output-log-file
      - run: cat ./output.log
      
  Run-Azure-Login-with-OpenID-Connect-and-PowerShell: 
    runs-on: windows-latest
    steps:
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          enable-AzPSSession: true

      - name: 'Get resource group with PowerShell action'
        uses: azure/powershell@v1
        with:
            inlineScript: |
              Get-AzResourceGroup
            azPSVersion: "latest"
